<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Sockets on Akshat Blogs</title>
    <link>http://localhost:1313/tags/web-sockets/</link>
    <description>Recent content in Web Sockets on Akshat Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/web-sockets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From WebSockets to SSE: Real-Time Communication in System Design</title>
      <link>http://localhost:1313/blog/real-time-communication-methods/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/real-time-communication-methods/</guid>
      <description>&lt;p&gt;When building modern web or mobile applications, itâ€™s often important to send and receive data &lt;strong&gt;in real time&lt;/strong&gt;  like getting new chat messages, notifications, or live updates. Here are four common ways to do that:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-short-polling&#34;&gt;1. &lt;strong&gt;Short Polling&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The client (like a browser) keeps asking the server for new data over and over again at fixed intervals (e.g., every 5 seconds).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client sends a request.&lt;/li&gt;&#xA;&lt;li&gt;The server replies right away with data (if any).&lt;/li&gt;&#xA;&lt;li&gt;The client waits a few seconds, then repeats the request.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Easy to set up.&lt;/li&gt;&#xA;&lt;li&gt;Uses basic HTTP â€” no special setup needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can be wasteful â€” sending requests even when there&amp;rsquo;s nothing new.&lt;/li&gt;&#xA;&lt;li&gt;More server load and delayed updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Simple dashboards that refresh data every few seconds.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-long-polling&#34;&gt;2. &lt;strong&gt;Long Polling&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The client sends a request and waits. The server doesnâ€™t respond until thereâ€™s new data to send (or a timeout happens).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client makes a request.&lt;/li&gt;&#xA;&lt;li&gt;The server keeps the connection open until it has something to send.&lt;/li&gt;&#xA;&lt;li&gt;When the data arrives, the server responds and the client immediately starts a new request.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reduces unnecessary traffic â€” only responds when thereâ€™s new data.&lt;/li&gt;&#xA;&lt;li&gt;Still works over standard HTTP.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can tie up server resources.&lt;/li&gt;&#xA;&lt;li&gt;More complex than short polling.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Comment updates on a blog or forum.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-websockets&#34;&gt;3. &lt;strong&gt;WebSockets&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: A fast, two-way communication channel between the client and server that stays open.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The connection starts as a regular HTTP request, then switches (or &amp;ldquo;upgrades&amp;rdquo;) to a WebSocket connection.&lt;/li&gt;&#xA;&lt;li&gt;After that, both sides can send messages anytime â€” instantly and continuously.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Very fast and efficient.&lt;/li&gt;&#xA;&lt;li&gt;Supports real-time, bidirectional communication.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Needs both server and client to support WebSockets.&lt;/li&gt;&#xA;&lt;li&gt;Harder to scale and manage compared to simple HTTP.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Chat apps, live sports scores, multiplayer games.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-server-sent-events-sse&#34;&gt;4. &lt;strong&gt;Server-Sent Events (SSE)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The server can send updates to the client over a single open connection â€” but only from server to client.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client makes a request to the server to start listening for updates.&lt;/li&gt;&#xA;&lt;li&gt;The server keeps the connection open and pushes updates as they happen.&lt;/li&gt;&#xA;&lt;li&gt;The client doesnâ€™t have to ask again.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simple and lightweight for one-way updates.&lt;/li&gt;&#xA;&lt;li&gt;Great for sending frequent updates like stock prices or notifications.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only works one way (server â†’ client).&lt;/li&gt;&#xA;&lt;li&gt;Doesnâ€™t support binary data out of the box.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: News tickers, live notifications, weather updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-summary-table&#34;&gt;ðŸ§¾ Summary Table&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Method&lt;/th&gt;&#xA;          &lt;th&gt;Communication&lt;/th&gt;&#xA;          &lt;th&gt;Complexity&lt;/th&gt;&#xA;          &lt;th&gt;Efficiency&lt;/th&gt;&#xA;          &lt;th&gt;Ideal For&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Short Polling&lt;/td&gt;&#xA;          &lt;td&gt;Client â†’ Server&lt;/td&gt;&#xA;          &lt;td&gt;Easy&lt;/td&gt;&#xA;          &lt;td&gt;Low&lt;/td&gt;&#xA;          &lt;td&gt;Simple apps, quick prototyping&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Long Polling&lt;/td&gt;&#xA;          &lt;td&gt;Client â†’ Server&lt;/td&gt;&#xA;          &lt;td&gt;Medium&lt;/td&gt;&#xA;          &lt;td&gt;Medium&lt;/td&gt;&#xA;          &lt;td&gt;Semi-live updates&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;WebSockets&lt;/td&gt;&#xA;          &lt;td&gt;Two-way&lt;/td&gt;&#xA;          &lt;td&gt;Advanced&lt;/td&gt;&#xA;          &lt;td&gt;High&lt;/td&gt;&#xA;          &lt;td&gt;Real-time apps (chat, games)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Server-Sent Events&lt;/td&gt;&#xA;          &lt;td&gt;Server â†’ Client&lt;/td&gt;&#xA;          &lt;td&gt;Easy&lt;/td&gt;&#xA;          &lt;td&gt;High&lt;/td&gt;&#xA;          &lt;td&gt;Notifications, live data feeds&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Each method has its strengths and is best suited for specific types of real-time needs. Your choice depends on:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
