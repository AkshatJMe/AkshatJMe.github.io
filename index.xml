<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Akshat Blogs</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Akshat Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jan 2024 00:00:00 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell Scripting</title>
      <link>http://localhost:1313/blog/shell-scripting/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/shell-scripting/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;Shell scripting is a way to automate tasks by writing scripts (sequences of commands) in a text file, which the shell can execute.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;basic-shell-scripting-commands&#34;&gt;&lt;strong&gt;Basic Shell Scripting Commands:&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;1-binbash&#34;&gt;1. &lt;strong&gt;&lt;code&gt;#!/bin/bash&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; This is called the &lt;em&gt;shebang&lt;/em&gt; line. It specifies the interpreter for the script (in this case, Bash). The script will be executed by the Bash shell.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; This script will print &amp;ldquo;Hello, World!&amp;rdquo; to the screen.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-echo&#34;&gt;2. &lt;strong&gt;&lt;code&gt;echo&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; The &lt;code&gt;echo&lt;/code&gt; command is used to print a message or the value of a variable to the terminal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monolith vs Microservices</title>
      <link>http://localhost:1313/blog/monolith-vs-microservices/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/monolith-vs-microservices/</guid>
      <description>&lt;p&gt;When building a software application, there are two popular ways to organize the code and services: &lt;strong&gt;Monolithic Architecture&lt;/strong&gt; and &lt;strong&gt;Microservices Architecture&lt;/strong&gt;. Letâ€™s break down what these mean, their pros and cons, and when to use each.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;what-is-monolithic-architecture&#34;&gt;What is Monolithic Architecture?&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Monolithic architecture&lt;/strong&gt; means building an application as one big, single unit. Everything â€” the user interface, business logic, and database access â€” is combined into one codebase and runs together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>From WebSockets to SSE: Real-Time Communication in System Design</title>
      <link>http://localhost:1313/blog/real-time-communication-methods/</link>
      <pubDate>Mon, 15 Aug 2022 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/real-time-communication-methods/</guid>
      <description>&lt;p&gt;When building modern web or mobile applications, itâ€™s often important to send and receive data &lt;strong&gt;in real time&lt;/strong&gt;  like getting new chat messages, notifications, or live updates. Here are four common ways to do that:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-short-polling&#34;&gt;1. &lt;strong&gt;Short Polling&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The client (like a browser) keeps asking the server for new data over and over again at fixed intervals (e.g., every 5 seconds).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client sends a request.&lt;/li&gt;&#xA;&lt;li&gt;The server replies right away with data (if any).&lt;/li&gt;&#xA;&lt;li&gt;The client waits a few seconds, then repeats the request.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Easy to set up.&lt;/li&gt;&#xA;&lt;li&gt;Uses basic HTTP â€” no special setup needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can be wasteful â€” sending requests even when there&amp;rsquo;s nothing new.&lt;/li&gt;&#xA;&lt;li&gt;More server load and delayed updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Simple dashboards that refresh data every few seconds.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-long-polling&#34;&gt;2. &lt;strong&gt;Long Polling&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The client sends a request and waits. The server doesnâ€™t respond until thereâ€™s new data to send (or a timeout happens).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client makes a request.&lt;/li&gt;&#xA;&lt;li&gt;The server keeps the connection open until it has something to send.&lt;/li&gt;&#xA;&lt;li&gt;When the data arrives, the server responds and the client immediately starts a new request.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reduces unnecessary traffic â€” only responds when thereâ€™s new data.&lt;/li&gt;&#xA;&lt;li&gt;Still works over standard HTTP.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can tie up server resources.&lt;/li&gt;&#xA;&lt;li&gt;More complex than short polling.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Comment updates on a blog or forum.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-websockets&#34;&gt;3. &lt;strong&gt;WebSockets&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: A fast, two-way communication channel between the client and server that stays open.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The connection starts as a regular HTTP request, then switches (or &amp;ldquo;upgrades&amp;rdquo;) to a WebSocket connection.&lt;/li&gt;&#xA;&lt;li&gt;After that, both sides can send messages anytime â€” instantly and continuously.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Very fast and efficient.&lt;/li&gt;&#xA;&lt;li&gt;Supports real-time, bidirectional communication.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Needs both server and client to support WebSockets.&lt;/li&gt;&#xA;&lt;li&gt;Harder to scale and manage compared to simple HTTP.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: Chat apps, live sports scores, multiplayer games.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-server-sent-events-sse&#34;&gt;4. &lt;strong&gt;Server-Sent Events (SSE)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What It Is&lt;/strong&gt;: The server can send updates to the client over a single open connection â€” but only from server to client.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The client makes a request to the server to start listening for updates.&lt;/li&gt;&#xA;&lt;li&gt;The server keeps the connection open and pushes updates as they happen.&lt;/li&gt;&#xA;&lt;li&gt;The client doesnâ€™t have to ask again.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simple and lightweight for one-way updates.&lt;/li&gt;&#xA;&lt;li&gt;Great for sending frequent updates like stock prices or notifications.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only works one way (server â†’ client).&lt;/li&gt;&#xA;&lt;li&gt;Doesnâ€™t support binary data out of the box.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Use Case Example&lt;/strong&gt;: News tickers, live notifications, weather updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-summary-table&#34;&gt;ðŸ§¾ Summary Table&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Method&lt;/th&gt;&#xA;          &lt;th&gt;Communication&lt;/th&gt;&#xA;          &lt;th&gt;Complexity&lt;/th&gt;&#xA;          &lt;th&gt;Efficiency&lt;/th&gt;&#xA;          &lt;th&gt;Ideal For&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Short Polling&lt;/td&gt;&#xA;          &lt;td&gt;Client â†’ Server&lt;/td&gt;&#xA;          &lt;td&gt;Easy&lt;/td&gt;&#xA;          &lt;td&gt;Low&lt;/td&gt;&#xA;          &lt;td&gt;Simple apps, quick prototyping&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Long Polling&lt;/td&gt;&#xA;          &lt;td&gt;Client â†’ Server&lt;/td&gt;&#xA;          &lt;td&gt;Medium&lt;/td&gt;&#xA;          &lt;td&gt;Medium&lt;/td&gt;&#xA;          &lt;td&gt;Semi-live updates&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;WebSockets&lt;/td&gt;&#xA;          &lt;td&gt;Two-way&lt;/td&gt;&#xA;          &lt;td&gt;Advanced&lt;/td&gt;&#xA;          &lt;td&gt;High&lt;/td&gt;&#xA;          &lt;td&gt;Real-time apps (chat, games)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Server-Sent Events&lt;/td&gt;&#xA;          &lt;td&gt;Server â†’ Client&lt;/td&gt;&#xA;          &lt;td&gt;Easy&lt;/td&gt;&#xA;          &lt;td&gt;High&lt;/td&gt;&#xA;          &lt;td&gt;Notifications, live data feeds&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Each method has its strengths and is best suited for specific types of real-time needs. Your choice depends on:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proxies and Load Balancers Enhance Web Performance and Security</title>
      <link>http://localhost:1313/blog/proxies-and-load-balancers-enhance-web-performance-and-security/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/proxies-and-load-balancers-enhance-web-performance-and-security/</guid>
      <description>&lt;h3 id=&#34;proxies&#34;&gt;Proxies&lt;/h3&gt;&#xA;&lt;p&gt;Proxies are tools that act as middlemen between clients (like your computer or smartphone) and servers on the internet. Depending on the type of proxy, they serve different purposes that help make online communication more efficient, secure, or private.&lt;/p&gt;&#xA;&lt;h3 id=&#34;forward-proxies&#34;&gt;Forward Proxies&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What They Do&lt;/strong&gt;: Forward proxies work on behalf of the client to access resources on the internet.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Common Uses&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt;: They can hide the client&amp;rsquo;s identity, making it harder for websites to track who you are.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Content Filtering&lt;/strong&gt;: They can block certain websites or restrict access to specific content.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: In corporate environments, companies often use forward proxies to control and monitor what their employees can access online.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;reverse-proxies&#34;&gt;Reverse Proxies&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What They Do&lt;/strong&gt;: A reverse proxy works the opposite wayâ€”it stands between clients and servers and handles incoming requests from clients to the server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Common Uses&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Load Balancing&lt;/strong&gt;: It helps evenly distribute incoming traffic to multiple servers, preventing any one server from getting overloaded.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Reverse proxies can hide the identity and details of servers, which makes it harder for attackers to find vulnerabilities.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt;: They can store copies of frequently requested data to speed up responses and reduce the load on servers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SSL Termination&lt;/strong&gt;: They handle encryption (SSL) for secure connections, offloading that work from the server.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;: Many large websites and web applications use reverse proxies to ensure their servers can handle lots of traffic and remain secure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;key-differences-between-forward-and-reverse-proxies&#34;&gt;Key Differences Between Forward and Reverse Proxies&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Forward Proxy&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Reverse Proxy&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Protects client identities, filters content.&lt;/td&gt;&#xA;          &lt;td&gt;Offloads server work, enhances security, and manages incoming traffic.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Clients access the internet through the proxy.&lt;/td&gt;&#xA;          &lt;td&gt;Clients access servers through the proxy.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Visibility&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Servers donâ€™t know who the client is.&lt;/td&gt;&#xA;          &lt;td&gt;Clients donâ€™t know which server theyâ€™re talking to.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Where Itâ€™s Located&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Typically inside client networks (home or corporate).&lt;/td&gt;&#xA;          &lt;td&gt;Positioned in front of the servers they protect.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Main Uses&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Anonymity, content filtering, or privacy.&lt;/td&gt;&#xA;          &lt;td&gt;Load balancing, security, caching, or handling server traffic.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Real-World Example&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Home networks, corporate setups, school networks.&lt;/td&gt;&#xA;          &lt;td&gt;Large websites, cloud services, or web applications.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;load-balancers&#34;&gt;Load Balancers&lt;/h3&gt;&#xA;&lt;p&gt;When a website or online service gets a lot of traffic, load balancers come into play. They help distribute the incoming traffic across multiple servers, so no single server gets overwhelmed. This ensures smoother performance and prevents slowdowns or crashes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Speeding Up Systems With Smart Storage</title>
      <link>http://localhost:1313/blog/speeding-up-systems-with-smart-storage/</link>
      <pubDate>Thu, 03 Mar 2022 22:20:17 +0530</pubDate>
      <guid>http://localhost:1313/blog/speeding-up-systems-with-smart-storage/</guid>
      <description>&lt;p&gt;Caching involves storing frequently accessed data in a fast cache to reduce access latency.  Improves system performance by minimizing data retrieval time. Reduces redundancy in data access.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-terms&#34;&gt;Key Terms&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-cache-miss&#34;&gt;1. Cache Miss&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;What It Is:&lt;/strong&gt; Occurs when requested data isn&amp;rsquo;t found in the cache.&lt;br&gt;&#xA;&lt;strong&gt;Impact:&lt;/strong&gt; Requires fetching data from slower main memory, increasing latency.&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-cache-hit&#34;&gt;2. Cache Hit&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;What It Is:&lt;/strong&gt; Happens when requested data is found in the cache.&lt;br&gt;&#xA;&lt;strong&gt;Impact:&lt;/strong&gt; Allows quick retrieval, reducing access time.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
